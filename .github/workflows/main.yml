name: CI/CD da API Flask para AWS ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: devops-aula-api

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout do Código
        uses: actions/checkout@v3

      - name: Configurar Credenciais AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login no Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Construir Imagem Docker
        id: build-image
        run: |
          ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          IMAGE_TAG="${{ github.sha }}"
          LATEST_TAG="latest"

          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$LATEST_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$LATEST_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Executar Testes Unitários
        run: |
          docker run --rm ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest /bin/bash -c "pip install -r requirements.txt && python test_app.py"

      - name: Push da Imagem Docker para ECR
        run: |
          ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          IMAGE_TAG="${{ github.sha }}"
          LATEST_TAG="latest"

          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$LATEST_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Atualizar Serviço ECS
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)

          ECS_CLUSTER_NAME="devops-cluster-aula"
          ECS_SERVICE_NAME="devops-aula-service"
          TASK_DEFINITION_FAMILY="devops-aula-task"
          CONTAINER_NAME="devops-aula-container"

          CURRENT_TASK_DEFINITION_ARN=$(aws ecs describe-services --cluster $ECS_CLUSTER_NAME --services $ECS_SERVICE_NAME --query "services[0].taskDefinition" --output text)

          TASK_DEF_JSON=$(aws ecs describe-task-definition --task-definition $CURRENT_TASK_DEFINITION_ARN)

          CPU=$(echo $TASK_DEF_JSON | jq -r '.taskDefinition.cpu')
          MEMORY=$(echo $TASK_DEF_JSON | jq -r '.taskDefinition.memory')
          EXECUTION_ROLE_ARN=$(echo $TASK_DEF_JSON | jq -r '.taskDefinition.executionRoleArn')
          TASK_ROLE_ARN=$(echo $TASK_DEF_JSON | jq -r '.taskDefinition.taskRoleArn // empty')
          NETWORK_MODE=$(echo $TASK_DEF_JSON | jq -r '.taskDefinition.networkMode')
          REQUIRES_COMPATIBILITIES=$(echo $TASK_DEF_JSON | jq -r '.taskDefinition.requiresCompatibilities | join(",")')

          NEW_IMAGE_URI="309254318065.dkr.ecr.us-east-1.amazonaws.com/devops-aula-api:${{ github.sha }}"
          CONTAINER_DEFINITIONS="[{\"name\": \"${CONTAINER_NAME}\", \"image\": \"${NEW_IMAGE_URI}\", \"portMappings\": [{\"containerPort\": 1313, \"protocol\": \"tcp\"}]}]"

          REGISTER_TASK_DEF_CMD="aws ecs register-task-definition \
            --family ${TASK_DEFINITION_FAMILY} \
            --container-definitions \"$CONTAINER_DEFINITIONS\" \
            --execution-role-arn ${EXECUTION_ROLE_ARN} \
            --requires-compatibilities ${REQUIRES_COMPATIBILITIES} \
            --network-mode ${NETWORK_MODE} \
            --cpu ${CPU} \
            --memory ${MEMORY}"

          if [ -n "$TASK_ROLE_ARN" ]; then
              REGISTER_TASK_DEF_CMD+=" --task-role-arn ${TASK_ROLE_ARN}"
          fi

          NEW_TASK_DEF_ARN=$($REGISTER_TASK_DEF_CMD --query "taskDefinition.taskDefinitionArn" --output text)
          echo "Nova Task Definition ARN: $NEW_TASK_DEF_ARN"

          aws ecs update-service \
            --cluster $ECS_CLUSTER_NAME \
            --service $ECS_SERVICE_NAME \
            --task-definition $NEW_TASK_DEF_ARN \
            --force-new-deployment
